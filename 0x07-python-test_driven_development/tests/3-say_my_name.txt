How to use the 3-say_my_name module
===================================

This module defines a function `def say_my_name(first_name, last_name="")`
that prints parameters (string) which are names

Usage
=====

The ``say_my_name`` function receives two parameters. The second which is optional
and prints them in this format ``My name is {param1} {param2}``

::
    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("John", "Smith")
    My name is John Smith

    >>> say_my_name("Walter", "White")
    My name is Walter White


Parameter 2 is optional but would be printed as space

::
    >>> say_my_name("Bob")
    My name is Bob 


Bad Usage
=========

param1 and param2 must be of type of string

They cant be number
::
    >>> say_my_name(12, "Chiwendu")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("Chibuikem", 45)
    Traceback (most recent call last):
    TypeError: last_name must be a string


They cant be of type list
::
    >>> say_my_name([], "Chimobi")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("Chibuikem", [])
    Traceback (most recent call last):
    TypeError: last_name must be a string


They cant be of type objects
::
    >>> say_my_name({}, "Chimobi")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("Chibuikem", {})
    Traceback (most recent call last):
    TypeError: last_name must be a string


Parameter cannot be None
::
    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string


At least one parameter is required
::
    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

