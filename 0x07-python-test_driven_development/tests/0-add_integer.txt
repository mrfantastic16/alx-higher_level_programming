======================================
How to use the 0-add_integer.py module
======================================

This module contains the `add-integer function` which
returns the addition of two numbers, be it ints or floats

Numbers
=======

``add-integer() returns the floored sum of its two parameter``

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

    >>> add_integer(6, -7)
    -1

    >>> add_integer(0, 3)
    3


Works with float but converts them to integers before adding

::

    >>> add_integer(2.0, 2.0)
    4

    >>> add_integer(2.3, 5.5)
    7



Second argument is optional but by default, it is 98

::

    >>> add_integer(2)
    100



Non-Numbers
===========

If first or second argument is not instance of int or float,
typeError is raised

::

    >>> add_integer(None, 20)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer([], 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer("string", 12)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer([], "string")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(34, "")
    Traceback (most recent call last):
    TypeError: b must be an integer


::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer


::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

